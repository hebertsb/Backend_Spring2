"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url
from urllib.parse import urlparse

load_dotenv()

STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY")
STRIPE_PUBLISHABLE_KEY = os.getenv("STRIPE_PUBLISHABLE_KEY")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-1)v771jj-q%urr%(e@q)ug!^b2$l_mxr^f=4h#$id^h==+_m-&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'backendspring2-production.up.railway.app',
    'turismosi2.netlify.app',
    'localhost',
    '127.0.0.1',
    '0.0.0.0',
    '192.168.0.1',
    '192.168.0.6',
    '192.168.56.1',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'condominio',
    'core',
    'authz',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_filters',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    # Allow local device dev servers (React Native / local web debug)
    'http://192.168.0.6:3000',
    'http://192.168.56.1:3000',
    # Frontend desplegado en Netlify
    'https://turismosi2.netlify.app',
    'https://sprightly-bunny-1e4b10.netlify.app'
]

# For development you can also allow all origins (use carefully):
# CORS_ALLOW_ALL_ORIGINS = True

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


def _mask_db_url(url: str) -> str:
    try:
        p = urlparse(url)
        pw_flag = "HAS_PASSWORD" if p.password else "NO_PASSWORD"
        return f"{p.scheme}://{p.username}:{pw_flag}@{p.hostname}:{p.port}{p.path}"
    except Exception:
        return "<invalid_db_url>"


# Intentar usar la URL del entorno
DATABASE_URL = os.getenv("DATABASE_URL") or os.getenv("RAILWAY_DATABASE_URL") or ""

# Si viene vacía o contiene placeholders (${...}), reconstruir usando POSTGRES_* o RAILWAY_* vars
def _env_clean(*names):
    """Return first env var value that doesn't look like a template placeholder.

    This ignores values that contain common unexpanded template markers or stray
    braces so we don't accidentally use malformed values coming from CI/CD
    platforms or bad .env files.
    """
    for n in names:
        v = os.getenv(n)
        if not v:
            continue
        # ignore values that contain unexpanded placeholders or stray braces
        if "${" in v or "}}" in v or "{" in v or "}" in v:
            continue
        return v
    return None


# If DATABASE_URL is completely missing or obviously contains template markers or
# stray braces, rebuild it from POSTGRES_/RAILWAY_ environment variables.
if not DATABASE_URL or any(bad in DATABASE_URL for bad in ("${", "{", "}")):
    pg_user = _env_clean("PGUSER", "POSTGRES_USER") or "postgres"
    pg_password = _env_clean("PGPASSWORD", "POSTGRES_PASSWORD") or ""
    pg_host = _env_clean("RAILWAY_PRIVATE_DOMAIN", "RAILWAY_TCP_PROXY_DOMAIN", "PGHOST") or "localhost"
    pg_port = _env_clean("PGPORT", "RAILWAY_TCP_PROXY_PORT") or "5432"
    pg_db = _env_clean("PGDATABASE", "POSTGRES_DB") or "railway"

    DATABASE_URL = f"postgresql://{pg_user}:{pg_password}@{pg_host}:{pg_port}/{pg_db}"
    # Mostrar versión mascarada (no expone la contraseña). Only print in DEBUG.
    if DEBUG:
        print(f"⚙️ DATABASE_URL reconstruida automáticamente: {_mask_db_url(DATABASE_URL)}")


# Configurar Django DB usando dj-database-url
# En producción suele requerirse SSL; ajusta ssl_require según tu proveedor
# Si estamos en DEBUG y la DATABASE_URL viene vacía o con placeholders, usar SQLite local
orig_env = os.getenv("DATABASE_URL") or os.getenv("RAILWAY_DATABASE_URL") or ""

# Helper to detect local hostnames
def _is_local_host(h: str) -> bool:
    return h in ("localhost", "127.0.0.1", "0.0.0.0")

# If DEBUG and the original env looks like a template or is missing, prefer SQLite
# to avoid blocking local development (migrations/tests).
bad_orig = not orig_env or any(bad in orig_env for bad in ("${", "{", "}"))

# Try to parse DATABASE_URL to validate it and decide SSL requirement.
parsed_host = None
try:
    p = urlparse(DATABASE_URL)
    parsed_host = p.hostname
except Exception:
    parsed_host = None

# Determine ssl requirement. Allow override with DB_SSL env var (0/false -> disable).
_db_ssl_env = os.getenv("DB_SSL")
def _is_falsey(v):
    return str(v).lower() in ("0", "false", "no", "off", "")

if _db_ssl_env is not None:
    ssl_required = not _is_falsey(_db_ssl_env)
else:
    # infer: disable SSL for local hosts, enable otherwise
    ssl_required = not (parsed_host and _is_local_host(parsed_host))

if DEBUG and (not DATABASE_URL or bad_orig or not parsed_host):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        "default": dj_database_url.parse(DATABASE_URL, conn_max_age=600, ssl_require=ssl_required)
    }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Django REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    # keep default permission flexible; viewsets/actions still specify permissions
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
}
