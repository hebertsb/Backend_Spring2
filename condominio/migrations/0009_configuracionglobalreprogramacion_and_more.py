# Generated by Django 5.2.7 on 2025-10-12 06:18

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('condominio', '0008_auto_20251012_0217'),
    ]

    operations = [
        migrations.CreateModel(
            name='ConfiguracionGlobalReprogramacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('clave', models.CharField(help_text='Identificador único de la configuración', max_length=100, unique=True)),
                ('valor', models.TextField(help_text='Valor de la configuración')),
                ('tipo_valor', models.CharField(choices=[('STRING', 'Texto'), ('INTEGER', 'Número entero'), ('DECIMAL', 'Número decimal'), ('BOOLEAN', 'Verdadero/Falso'), ('JSON', 'Objeto JSON'), ('LISTA', 'Lista separada por comas')], default='STRING', max_length=50)),
                ('activa', models.BooleanField(default=True)),
                ('descripcion', models.TextField(blank=True, help_text='Descripción de qué hace esta configuración', null=True)),
            ],
            options={
                'verbose_name': 'Configuración Global',
                'verbose_name_plural': 'Configuraciones Globales',
                'ordering': ['clave'],
            },
        ),
        migrations.AlterModelOptions(
            name='reglareprogramacion',
            options={'ordering': ['-prioridad', '-created_at'], 'verbose_name': 'Regla de Reprogramación', 'verbose_name_plural': 'Reglas de Reprogramación'},
        ),
        migrations.AddField(
            model_name='reglareprogramacion',
            name='activa',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='reglareprogramacion',
            name='aplicable_a',
            field=models.CharField(choices=[('ALL', 'Todos los usuarios'), ('CLIENTE', 'Solo clientes'), ('ADMIN', 'Solo administradores'), ('OPERADOR', 'Solo operadores')], default='ALL', max_length=50),
        ),
        migrations.AddField(
            model_name='reglareprogramacion',
            name='condiciones_extras',
            field=models.JSONField(blank=True, default=dict, help_text='Condiciones adicionales en JSON'),
        ),
        migrations.AddField(
            model_name='reglareprogramacion',
            name='fecha_fin_vigencia',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='reglareprogramacion',
            name='fecha_inicio_vigencia',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='reglareprogramacion',
            name='mensaje_error',
            field=models.TextField(blank=True, help_text='Mensaje personalizado cuando no se cumple', null=True),
        ),
        migrations.AddField(
            model_name='reglareprogramacion',
            name='nombre',
            field=models.CharField(default='Regla sin nombre', help_text='Nombre descriptivo de la regla', max_length=200),
        ),
        migrations.AddField(
            model_name='reglareprogramacion',
            name='prioridad',
            field=models.IntegerField(default=0, help_text='Mayor número = mayor prioridad'),
        ),
        migrations.AddField(
            model_name='reglareprogramacion',
            name='tipo_regla',
            field=models.CharField(choices=[('TIEMPO_MINIMO', 'Tiempo mínimo de anticipación'), ('TIEMPO_MAXIMO', 'Tiempo máximo para reprogramar'), ('LIMITE_REPROGRAMACIONES', 'Límite de reprogramaciones por reserva'), ('LIMITE_DIARIO', 'Límite diario de reprogramaciones por usuario'), ('DIAS_BLACKOUT', 'Días no permitidos para reprogramar'), ('HORAS_BLACKOUT', 'Horas no permitidas'), ('SERVICIOS_RESTRINGIDOS', 'Servicios con restricciones especiales'), ('CAPACIDAD_MAXIMA', 'Límite de capacidad por fecha'), ('DESCUENTO_PENALIZACION', 'Penalización por reprogramar')], default='TIEMPO_ANTICIPACION', max_length=50),
        ),
        migrations.AddField(
            model_name='reglareprogramacion',
            name='valor_booleano',
            field=models.BooleanField(blank=True, help_text='Para reglas si/no', null=True),
        ),
        migrations.AddField(
            model_name='reglareprogramacion',
            name='valor_decimal',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Para porcentajes y decimales', max_digits=10, null=True),
        ),
        migrations.AddField(
            model_name='reglareprogramacion',
            name='valor_numerico',
            field=models.IntegerField(blank=True, help_text='Para límites numéricos', null=True),
        ),
        migrations.AddField(
            model_name='reglareprogramacion',
            name='valor_texto',
            field=models.TextField(blank=True, help_text='Para listas, JSON, etc.', null=True),
        ),
        migrations.AddField(
            model_name='reserva',
            name='estado',
            field=models.CharField(choices=[('PENDIENTE', 'Pendiente'), ('CONFIRMADA', 'Confirmada'), ('PAGADA', 'Pagada'), ('CANCELADA', 'Cancelada'), ('COMPLETADA', 'Completada'), ('REPROGRAMADA', 'Reprogramada')], default='PENDIENTE', max_length=20),
        ),
        migrations.AddField(
            model_name='reserva',
            name='fecha_fin',
            field=models.DateTimeField(blank=True, help_text='Fecha y hora de finalización', null=True),
        ),
        migrations.AddField(
            model_name='reserva',
            name='fecha_inicio',
            field=models.DateTimeField(blank=True, help_text='Fecha y hora específica del servicio', null=True),
        ),
        migrations.AddField(
            model_name='reserva',
            name='fecha_original',
            field=models.DateTimeField(blank=True, help_text='Fecha original antes de reprogramar', null=True),
        ),
        migrations.AddField(
            model_name='reserva',
            name='fecha_reprogramacion',
            field=models.DateTimeField(blank=True, help_text='Última fecha de reprogramación', null=True),
        ),
        migrations.AddField(
            model_name='reserva',
            name='moneda',
            field=models.CharField(default='BOB', max_length=10),
        ),
        migrations.AddField(
            model_name='reserva',
            name='motivo_reprogramacion',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='reserva',
            name='numero_reprogramaciones',
            field=models.IntegerField(default=0, help_text='Cantidad de veces reprogramada'),
        ),
        migrations.AddField(
            model_name='reserva',
            name='reprogramado_por',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reprogramaciones_realizadas', to='condominio.usuario'),
        ),
        migrations.AlterField(
            model_name='reglareprogramacion',
            name='condiciones',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='reglareprogramacion',
            name='descripcion',
            field=models.CharField(default='Descripción pendiente', max_length=150),
        ),
        migrations.AlterField(
            model_name='reglareprogramacion',
            name='limite_hora',
            field=models.PositiveIntegerField(blank=True, help_text='Horas antes del evento para permitir reprogramación', null=True),
        ),
        migrations.CreateModel(
            name='HistorialReprogramacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('fecha_anterior', models.DateTimeField(help_text='Fecha anterior antes del cambio')),
                ('fecha_nueva', models.DateTimeField(help_text='Nueva fecha después del cambio')),
                ('motivo', models.TextField(blank=True, help_text='Motivo de la reprogramación', null=True)),
                ('notificacion_enviada', models.BooleanField(default=False, help_text='Si se envió notificación al cliente')),
                ('reprogramado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='condominio.usuario')),
                ('reserva', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='historial_reprogramaciones', to='condominio.reserva')),
            ],
            options={
                'verbose_name': 'Historial de Reprogramación',
                'verbose_name_plural': 'Historial de Reprogramaciones',
                'ordering': ['-created_at'],
            },
        ),
    ]
